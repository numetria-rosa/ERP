// Prisma schema for ERP

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int
  employee  Employee?
  notifications Notification[]
  preferences UserPreference?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Employee {
  id           Int        @id @default(autoincrement())
  user         User?      @relation(fields: [userId], references: [id])
  userId       Int?       @unique
  firstName    String
  lastName     String
  email        String   @unique
  phone        String?
  position     String?
  role         String?
  salary       Float?
  hourlyRate   Float?
  status       String    @default("active")
  hireDate     DateTime  @default(now())
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int
  attendances  Attendance[]
  leaves       Leave[]
  payrolls     Payroll[]
  tasksAssigned Task[]   @relation("AssignedTasks")
  timeEntries  TimeEntry[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Department {
  id        Int        @id @default(autoincrement())
  name      String    @unique
  employees Employee[]
}

model Attendance {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  date       DateTime
  checkIn    DateTime?
  checkOut   DateTime?
  status     String   @default("present") // present, absent, late, half-day
  hoursWorked Float?
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model TimeEntry {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  date       DateTime
  startTime  DateTime
  endTime    DateTime?
  hours      Float?
  project    Project? @relation(fields: [projectId], references: [id])
  projectId  Int?
  task       Task?    @relation(fields: [taskId], references: [id])
  taskId     Int?
  description String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Leave {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  startDate  DateTime
  endDate    DateTime
  reason     String
  status     String   @default("pending") // pending, approved, rejected
  leaveType  String   // sick, vacation, personal, etc.
  approvedBy Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Payroll {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  amount     Float
  baseSalary Float
  overtime   Float    @default(0)
  deductions Float    @default(0)
  bonuses    Float    @default(0)
  period     String   // monthly, bi-weekly, etc.
  startDate  DateTime
  endDate    DateTime
  status     String   @default("pending") // pending, processed, paid
  processedAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  sku         String   @unique
  description String?
  category    String?
  price       Float
  cost        Float?
  status      String   @default("active")
  stock       Stock[]
  lowStockThreshold Int @default(10)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Stock {
  id         Int      @id @default(autoincrement())
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  warehouse  Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId Int
  quantity   Int
  minQuantity Int     @default(0)
  maxQuantity Int?
  lastUpdated DateTime @default(now())
}

model Warehouse {
  id     Int    @id @default(autoincrement())
  name   String
  stock  Stock[]
}

model Customer {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  phone       String?
  status      String   @default("active")
  notes       String?
  lastContact DateTime @default(now())
  projects    Project[]
  invoices    Invoice[]
  recurringInvoices RecurringInvoice[]
}

model Project {
  id         Int      @id @default(autoincrement())
  name       String
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  tasks      Task[]
  timeEntries TimeEntry[]
  startDate  DateTime?
  endDate    DateTime?
  status     String   @default("active")
  budget     Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt @default(now())
}

model Task {
  id         Int      @id @default(autoincrement())
  name       String
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  Int
  assignedTo Employee? @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId Int?
  status     String   @default("pending")
  priority   String   @default("medium") // low, medium, high, urgent
  dueDate    DateTime?
  estimatedHours Float?
  actualHours Float?
  description String?
  timeEntries TimeEntry[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt @default(now())
}

model Transaction {
  id         Int      @id @default(autoincrement())
  amount     Float
  date       DateTime
  type       String   // income, expense
  category   String?
  description String?
  invoice    Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId  Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt @default(now())
}

model Invoice {
  id         Int      @id @default(autoincrement())
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  amount     Float
  date       DateTime
  dueDate    DateTime?
  status     String   @default("draft") // draft, sent, paid, overdue, cancelled
  recurringInvoice RecurringInvoice? @relation(fields: [recurringInvoiceId], references: [id])
  recurringInvoiceId Int?
  transactions Transaction[]
  items      InvoiceItem[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt @default(now())
}

model InvoiceItem {
  id         Int      @id @default(autoincrement())
  invoice    Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId  Int
  description String
  quantity   Float
  unitPrice  Float
  total      Float
}

model RecurringInvoice {
  id         Int      @id @default(autoincrement())
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  amount     Float
  frequency  String   // monthly, quarterly, yearly
  startDate  DateTime
  endDate    DateTime?
  status     String   @default("active")
  invoices   Invoice[]
  nextDueDate DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Alert {
  id         Int      @id @default(autoincrement())
  type       String   // low_stock, late_task, missed_attendance, overdue_invoice
  title      String
  message    String
  severity   String   @default("medium") // low, medium, high, critical
  status     String   @default("active") // active, resolved, dismissed
  targetId   Int?     // ID of the related entity
  targetType String?  // employee, product, task, invoice, etc.
  createdAt  DateTime @default(now())
  resolvedAt DateTime?
  resolvedBy Int?
}

model Notification {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  message    String
  type       String   @default("info") // info, success, warning, error
  read       Boolean  @default(false)
  actionUrl  String?
  createdAt  DateTime @default(now())
}

model UserPreference {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @unique
  theme      String   @default("light") // light, dark
  language   String   @default("en") // en, fr, ar
  timezone   String   @default("UTC")
  emailNotifications Boolean @default(true)
  pushNotifications Boolean @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model EmailTemplate {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  subject    String
  body       String
  variables  String?  // JSON string of available variables
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model EmailLog {
  id         Int      @id @default(autoincrement())
  to         String
  subject    String
  body       String
  status     String   @default("sent") // sent, failed, pending
  error      String?
  sentAt     DateTime @default(now())
} 